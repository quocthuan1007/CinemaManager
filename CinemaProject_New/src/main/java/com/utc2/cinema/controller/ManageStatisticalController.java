package com.utc2.cinema.controller;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.utc2.cinema.config.Database;
import com.utc2.cinema.dao.ThongKeDao;
import com.utc2.cinema.model.entity.CustomAlert;

import com.utc2.cinema.model.entity.StatisticalFilm;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Node;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.*;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Locale;

public class ManageStatisticalController {

    private Pane thongKePane;
    private static TableView<StatisticalFilm> tableThongKe;
    @FXML private TableColumn<StatisticalFilm, String> filmNameColumn;
    @FXML private TableColumn<StatisticalFilm, Integer> showCountColumn;
    @FXML private TableColumn<StatisticalFilm, Integer> seatSoldColumn;
    @FXML private TableColumn<StatisticalFilm, Double> totalRevenueColumn;
    @FXML private static DatePicker batDauThongKe;
    @FXML private static DatePicker ketThucThongKe;
    @FXML private static TextField searchFilmField;
    @FXML private static Label totalShowLabel;
    @FXML private static Label totalSeatsLabel;
    @FXML private static Label totalRevenueLabel;
    @FXML private static PieChart pieChart;
    @FXML private static BarChart<String, Number> barChart;
    public ManageStatisticalController(MainManagerController main)
    {
        thongKePane = main.getThongKePane();
        tableThongKe = main.getTableThongKe();
        filmNameColumn = main.getFilmNameColumn();
        showCountColumn = main.getShowCountColumn();
        seatSoldColumn = main.getSeatSoldColumn();
        totalRevenueColumn = main.getTotalRevenueColumn();
        batDauThongKe = main.getBatDauThongKe();
        ketThucThongKe = main.getKetThucThongKe();
        searchFilmField = main.getSearchFilmField();
        totalShowLabel = main.getTotalShowLabel();
        totalSeatsLabel = main.getTotalSeatsLabel();
        totalRevenueLabel = main.getTotalRevenueLabel();
        pieChart = main.getPieChart();
        barChart = main.getBarChart();
    }



    public void initialize() {
        filmNameColumn.setCellValueFactory(cell -> cell.getValue().filmNameProperty());
        showCountColumn.setCellValueFactory(cell -> cell.getValue().showCountProperty().asObject());
        seatSoldColumn.setCellValueFactory(cell -> cell.getValue().seatSoldProperty().asObject());
        totalRevenueColumn.setCellValueFactory(cell -> cell.getValue().totalRevenueProperty().asObject());

        // ‚è∞ M·∫∑c ƒë·ªãnh ch·ªçn ng√†y t·ª´ 1 th√°ng tr∆∞·ªõc ƒë·∫øn h√¥m nay
        LocalDate now = LocalDate.now();
        batDauThongKe.setValue(now.minusMonths(1));
        ketThucThongKe.setValue(now);

        // üìä T·∫£i d·ªØ li·ªáu m·∫∑c ƒë·ªãnh lu√¥n khi kh·ªüi ƒë·ªông
        loadData(null);
    }


    @FXML
    public static void onSearchThongKe(ActionEvent event) {
        loadData(null);
    }

    @FXML
    public static void onSearchFilmRevenue(ActionEvent event) {
        String keyword = searchFilmField.getText().trim();
        loadData(keyword);
    }

    private static void loadData(String keyword) {
        LocalDate startDate = batDauThongKe.getValue();
        LocalDate endDate = ketThucThongKe.getValue();

        if (startDate == null || endDate == null) {
            CustomAlert.showError("L·ªói", "Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c!");
            return;
        }
        if (!startDate.isBefore(endDate)) {
            CustomAlert.showError("L·ªói", "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ng√†y k·∫øt th√∫c!");
            return;
        }

        try {
            ThongKeDao dao = new ThongKeDao();
            List<StatisticalFilm> list = dao.getFilmStatistics(startDate, endDate, keyword);
            ObservableList<StatisticalFilm> data = FXCollections.observableArrayList(list);

            int totalShows = data.stream().mapToInt(StatisticalFilm::getShowCount).sum();
            int totalSeats = data.stream().mapToInt(StatisticalFilm::getSeatSold).sum();
            double totalRevenue = data.stream().mapToDouble(StatisticalFilm::getTotalRevenue).sum();

            tableThongKe.setItems(data);
            totalShowLabel.setText(totalShows + " su·∫•t chi·∫øu");
            totalSeatsLabel.setText(totalSeats + " v√© ƒë√£ b√°n");
            NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
            String formattedRevenue = currencyFormatter.format(totalRevenue);

            // N·∫øu b·∫°n mu·ªën b·ªè k√Ω hi·ªáu ‚Ç´ v√† thay b·∫±ng "VNƒê":
            formattedRevenue = formattedRevenue.replace("‚Ç´", "VNƒê");

            totalRevenueLabel.setText(formattedRevenue);

            updateCharts(data);
        } catch (SQLException e) {
            e.printStackTrace();
            CustomAlert.showError("L·ªói", "Kh√¥ng th·ªÉ truy xu·∫•t d·ªØ li·ªáu th·ªëng k√™.");
        }
    }

    private static void updateCharts(List<StatisticalFilm> data) {
        pieChart.getData().clear();
        barChart.getData().clear();

        XYChart.Series<String, Number> seatSeries = new XYChart.Series<>();
        seatSeries.setName("V√© b√°n");

        XYChart.Series<String, Number> showSeries = new XYChart.Series<>();
        showSeries.setName("Su·∫•t chi·∫øu");

        int otherShows = 0, otherSeats = 0;
        int limit = Math.min(4, data.size());

        for (int i = 0; i < data.size(); i++) {
            StatisticalFilm sf = data.get(i);
            if (i < 4) {
                seatSeries.getData().add(new XYChart.Data<>(sf.getFilmName(), sf.getSeatSold()));
                showSeries.getData().add(new XYChart.Data<>(sf.getFilmName(), sf.getShowCount()));
                pieChart.getData().add(new PieChart.Data(sf.getFilmName(), sf.getSeatSold()));
            } else {
                otherSeats += sf.getSeatSold();
                otherShows += sf.getShowCount();
            }
        }

        if (data.size() > 4) {
            seatSeries.getData().add(new XYChart.Data<>("Kh√°c", otherSeats));
            showSeries.getData().add(new XYChart.Data<>("Kh√°c", otherShows));
            pieChart.getData().add(new PieChart.Data("Kh√°c", otherSeats));
        }

        barChart.getData().addAll(seatSeries, showSeries);

        // L√†m label c·ªßa PieChart m√†u tr·∫Øng (n·∫øu render ch·∫≠m th√¨ c·∫ßn Platform.runLater)
        Platform.runLater(() -> {
            for (PieChart.Data d : pieChart.getData()) {
                Node node = d.getNode();
                if (node != null) {
                    Text text = (Text) node.lookup(".chart-pie-label");
                    if (text != null) {
                        text.setFill(Color.WHITE);
                    }
                }
            }
        });
    }

    @FXML
    public static void onExportPdf(ActionEvent event) {
        LocalDate startDate = batDauThongKe.getValue();
        LocalDate endDate = ketThucThongKe.getValue();

        if (startDate == null || endDate == null) {
            CustomAlert.showError("L·ªói", "Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c!");
            return;
        }

        List<StatisticalFilm> data = tableThongKe.getItems();
        if (data == null || data.isEmpty()) {
            CustomAlert.showWarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
            return;
        }

        try {
            // ƒê·ªãnh d·∫°ng t√™n file theo ng√†y
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
            String fileName = "ThongKe_" + startDate.format(formatter) + "_den_" + endDate.format(formatter) + ".pdf";
            String filePath = fileName;

            Document document = new Document(PageSize.A4);
            PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();

            // Load font Unicode h·ªó tr·ª£ ti·∫øng Vi·ªát
            InputStream fontStream = ManageStatisticalController.class.getResourceAsStream("/fonts/DejaVuLGCSerif.ttf");
            if (fontStream == null) {
                throw new FileNotFoundException("Kh√¥ng t√¨m th·∫•y font DejaVuSerif.ttf trong resources/fonts/");
            }

            BaseFont baseFont = BaseFont.createFont(
                    "DejaVuSerif.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED,
                    BaseFont.CACHED, fontStream.readAllBytes(), null
            );

            Font fontTitle = new Font(baseFont, 18, Font.BOLD);
            Font fontNormal = new Font(baseFont, 12);

            Paragraph title = new Paragraph("B√ÅO C√ÅO TH·ªêNG K√ä DOANH THU PHIM\n", fontTitle);
            title.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(title);

            Paragraph dateInfo = new Paragraph("T·ª´ ng√†y " + startDate + " ƒë·∫øn ng√†y " + endDate + "\n\n", fontNormal);
            dateInfo.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(dateInfo);

            PdfPTable table = new PdfPTable(4);
            table.setWidths(new int[]{3, 2, 2, 3});
            table.setWidthPercentage(100);

            NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
            currencyFormat.setMaximumFractionDigits(0);

            table.addCell(new PdfPCell(new Phrase("T√™n phim", fontNormal)));
            table.addCell(new PdfPCell(new Phrase("S·ªë su·∫•t chi·∫øu", fontNormal)));
            table.addCell(new PdfPCell(new Phrase("S·ªë v√© b√°n", fontNormal)));
            table.addCell(new PdfPCell(new Phrase("Doanh thu", fontNormal)));

            for (StatisticalFilm sf : data) {
                table.addCell(new PdfPCell(new Phrase(sf.getFilmName(), fontNormal)));
                table.addCell(new PdfPCell(new Phrase(String.valueOf(sf.getShowCount()), fontNormal)));
                table.addCell(new PdfPCell(new Phrase(String.valueOf(sf.getSeatSold()), fontNormal)));
                table.addCell(new PdfPCell(new Phrase(currencyFormat.format(sf.getTotalRevenue()), fontNormal)));
            }

            document.add(table);

            // T√≠nh t·ªïng
            int totalShow = data.stream().mapToInt(StatisticalFilm::getShowCount).sum();
            int totalSeat = data.stream().mapToInt(StatisticalFilm::getSeatSold).sum();
            double totalRevenue = data.stream().mapToDouble(StatisticalFilm::getTotalRevenue).sum();

            Paragraph totals = new Paragraph(String.format(
                    "\nT·ªïng c·ªông: %d su·∫•t chi·∫øu, %d v√© b√°n, %s doanh thu",
                    totalShow, totalSeat, currencyFormat.format(totalRevenue)
            ), fontNormal);
            document.add(totals);

            document.close();

            CustomAlert.showSuccess("Th√†nh c√¥ng", "Xu·∫•t file PDF th√†nh c√¥ng:\n" + filePath);
        } catch (Exception e) {
            e.printStackTrace();
            CustomAlert.showError("L·ªói", "Kh√¥ng th·ªÉ xu·∫•t file PDF.");
        }
    }


    @FXML
    public static void onExportExcel(ActionEvent event) {
        List<StatisticalFilm> data = tableThongKe.getItems();
        if (data == null || data.isEmpty()) {
            CustomAlert.showWarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
            return;
        }

        LocalDate startDate = batDauThongKe.getValue();
        LocalDate endDate = ketThucThongKe.getValue();

        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Th·ªëng k√™ phim");

            int rowIndex = 0;

            // D√≤ng th√¥ng tin ng√†y th·ªëng k√™
            Row infoRow = sheet.createRow(rowIndex++);
            infoRow.createCell(0).setCellValue("Th·ªëng k√™ t·ª´ ng√†y " + startDate + " ƒë·∫øn " + endDate);

            // D√≤ng tr·ªëng
            rowIndex++;

            // Ti√™u ƒë·ªÅ c·ªôt
            Row header = sheet.createRow(rowIndex++);
            header.createCell(0).setCellValue("T√™n phim");
            header.createCell(1).setCellValue("S·ªë su·∫•t chi·∫øu");
            header.createCell(2).setCellValue("S·ªë v√© b√°n");
            header.createCell(3).setCellValue("Doanh thu (VNƒê)");

            // D·ªØ li·ªáu t·ª´ng d√≤ng
            double totalRevenue = 0;
            for (StatisticalFilm sf : data) {
                Row row = sheet.createRow(rowIndex++);
                row.createCell(0).setCellValue(sf.getFilmName());
                row.createCell(1).setCellValue(sf.getShowCount());
                row.createCell(2).setCellValue(sf.getSeatSold());
                row.createCell(3).setCellValue(sf.getTotalRevenue());
                totalRevenue += sf.getTotalRevenue();
            }

            // D√≤ng tr·ªëng
            rowIndex++;

            // D√≤ng t·ªïng doanh thu
            Row totalRow = sheet.createRow(rowIndex);
            totalRow.createCell(2).setCellValue("T·ªïng doanh thu:");
            totalRow.createCell(3).setCellValue(String.format("%.0f", totalRevenue));

            // T·ª± ƒë·ªông co gi√£n c·ªôt
            for (int i = 0; i < 4; i++) {
                sheet.autoSizeColumn(i);
            }

            // ƒê·ªãnh d·∫°ng t√™n file theo ng√†y
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMdd");
            String fileName = "ThongKe_" + startDate.format(formatter) + "_den_" + endDate.format(formatter) + ".xlsx";
            String filePath = fileName;

            // Ghi file Excel
            try (FileOutputStream out = new FileOutputStream(filePath)) {
                workbook.write(out);
            }

            CustomAlert.showSuccess("Th√†nh c√¥ng", "Xu·∫•t file Excel th√†nh c√¥ng:\n" + filePath);
        } catch (Exception e) {
            e.printStackTrace();
            CustomAlert.showError("L·ªói", "Kh√¥ng th·ªÉ xu·∫•t file Excel.");
        }
    }


}
